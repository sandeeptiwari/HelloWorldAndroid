<?xml version="1.0" encoding="UTF-8"?>
<issues format="4" by="lint 24.1.2">

    <issue
        id="GradleDeprecated"
        severity="Warning"
        message="&apos;android&apos; is deprecated; use &apos;com.android.application&apos; instead"
        category="Correctness"
        priority="6"
        summary="Deprecated Gradle Construct"
        explanation="This detector looks for deprecated Gradle constructs which currently work but will likely stop working in a future update."
        errorLine1="apply plugin: &apos;android&apos;"
        errorLine2="~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="E:\techiesandeep\HelloWorld\build.gradle"
            line="9"
            column="1"/>
    </issue>

    <issue
        id="PropertyEscape"
        severity="Error"
        message="Windows file separators (`\`) and drive letter separators (&apos;:&apos;) must be escaped (`\\`) in property files; use C\:\\adt\\new setup\\adt-bundle-windows-x86_64-20140702\\sdk"
        category="Correctness"
        priority="6"
        summary="Incorrect property escapes"
        explanation="All backslashes and colons in .property files must be escaped with a backslash (\). This means that when writing a Windows path, you must escape the file separators, so the path \My\Files should be written as `key=\\My\\Files.`"
        errorLine1="sdk.dir=C:\\adt\\new setup\\adt-bundle-windows-x86_64-20140702\\sdk"
        errorLine2="         ~"
        quickfix="studio">
        <location
            file="E:\techiesandeep\HelloWorld\local.properties"
            line="10"
            column="10"/>
    </issue>

    <issue
        id="UsingHttp"
        severity="Warning"
        message="Replace HTTP with HTTPS for better security; use https\://services.gradle.org/distributions/gradle-1.12-all.zip"
        category="Security"
        priority="6"
        summary="Using HTTP instead of HTTPS"
        explanation="The Gradle Wrapper is available both via HTTP and HTTPS. HTTPS is more secure since it protects against man-in-the-middle attacks etc. Older projects created in Android Studio used HTTP but we now default to HTTPS and recommend upgrading existing projects."
        errorLine1="distributionUrl=http\://services.gradle.org/distributions/gradle-1.12-all.zip"
        errorLine2="                ~~~~"
        quickfix="studio">
        <location
            file="E:\techiesandeep\HelloWorld\gradle\wrapper\gradle-wrapper.properties"
            line="6"
            column="17"/>
    </issue>

    <issue
        id="IconMissingDensityFolder"
        severity="Warning"
        message="Missing density variation folders in `src\main\res`: drawable-xxhdpi, drawable-xxxhdpi"
        category="Usability:Icons"
        priority="3"
        summary="Missing density folder"
        explanation="Icons will look best if a custom version is provided for each of the major screen density classes (low, medium, high, extra-high, extra-extra-high). This lint check identifies folders which are missing, such as `drawable-hdpi`.
Low density is not really used much anymore, so this check ignores the ldpi density. To force lint to include it, set the environment variable `ANDROID_LINT_INCLUDE_LDPI=true`. For more information on current density usage, see http://developer.android.com/resources/dashboard/screens.html"
        url="http://developer.android.com/guide/practices/screens_support.html"
        urls="http://developer.android.com/guide/practices/screens_support.html">
        <location
            file="E:\techiesandeep\HelloWorld\src\main\res"/>
    </issue>

    <issue
        id="HardcodedText"
        severity="Warning"
        message="[I18N] Hardcoded string &quot;Hello World, HelloGradle&quot;, should use `@string` resource"
        category="Internationalization"
        priority="5"
        summary="Hardcoded text"
        explanation="Hardcoding text attributes directly in layout files is bad for several reasons:

* When creating configuration variations (for example for landscape or portrait)you have to repeat the actual text (and keep it up to date when making changes)

* The application cannot be translated to other languages by just adding new translations for existing string resources.

In Android Studio and Eclipse there are quickfixes to automatically extract this hardcoded string into a resource lookup."
        errorLine1="    android:text=&quot;Hello World, HelloGradle&quot;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="E:\techiesandeep\HelloWorld\src\main\res\layout\main.xml"
            line="10"
            column="5"/>
    </issue>

</issues>
